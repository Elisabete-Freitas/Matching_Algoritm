const express = require('express');
const bcrypt = require('bcrypt');
const User = require('../Models/User');
const jwt = require('jsonwebtoken'); 
const {sendEmail, sendEmailWithHtml} = require('../Services/EmailSender');

const router = express.Router();

router.post("/login", async (req, res) => {
  const { email, password } = req.body;
 console.log("Login: ", email, password);
  try {
  
const user = await User.findOne({ email: email });
if (!user) {
  return res.status(404).send({ message: 'O utilizador nao foi encontrado. Verifique o email e tente novamente.' });
}
if (user.account_status === false) {
  return res.status(403).send({ message: 'A sua conta nao esta ativa. Por favor, contacte o suporte.' });
}
const isMatch = await bcrypt.compare(password, user.password);
if (!isMatch) {
  return res.status(401).send({ message: 'A palavra-passe esta incorreta. Tente novamente.' });
}

    const token = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }  
    );

  
    res.json({
      message: 'Login successful',
      token: token,
      userData: {
        id: user._id,
        name: user.name,
        lastname: user.lastname,
        email: user.email,
        role: user.role
      }
    });

    const emailHtmlBody = {
      message: 'Email de teste',
      //urlLink: `https://bee-land.pt/reset-password?token=${resetToken}`,
      urlLink: `https://bee-land.pt`,
      title:"TESTE",
      name: user.name,
      btnText: "Redefinir"
    }

    const emailSubject = 'BEELAND - Teste';
    const emailBody = 'Email de teste para notificaÃ§Ãµes do BEELAND';
    const toEmail = "efreitas@morecolab.pt"; 

  } catch (error) {
    console.error('Login error', error);
    res.status(500).send({ message: 'Ocorreu um erro no servidor. Por favor, tente mais tarde.' });
  }
});



router.get("/hashpasswords", async (req, res) => {
  try {
    const users = await User.find({});

    for (let user of users) {
      const hashedPassword = await bcrypt.hash(user.password, saltRounds);
      user.password = hashedPassword;
      await user.save();
    }

    res.status(200).send("Passwords hashed successfully.");
  } catch (error) {
    console.error("Error while hashing passwords:", error);
    res.status(500).send("Server error.");
  }
});

module.exports = router;

